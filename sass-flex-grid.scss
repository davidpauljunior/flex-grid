// These should be overriden by the user as necessary.

$gutter: 1rem; // To do, allow this to be px, em/rem, or %.  Super flexible.
$columns: 12 !default; // This can also be overriden, 12, 16, 24, whatever (even only)
$flex-fallback: true !default;

@mixin grid-row($gutter: #{$gutter}) {
    @if $flex-fallback {
        &:before,
        &:after {
            content: ' ';
            display: table;
        }

        &:after {
            clear: both;
        }
    }

    @if $gutter != "no-gutter" {
        margin-left: -$gutter;
        margin-right: -$gutter;
    }

    @supports (display: flex) {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
}

@mixin grid-row-reverse {
    @supports (display: flex) {
        flex-direction: row-reverse;
    }
}

@mixin grid-span($size, $gutter: #{$gutter}) {
    position: relative;
    min-height: 1px;
    width: 100%;

    @if type-of($size) == number {
        flex: 0 0 percentage($size / $columns);
        max-width: percentage($size / $columns); // Stops content overflowing in FF and IE
    }

    @else {
        @error 'The first parameter of the `grid-span` mixin must be a number';
    }

    @if $gutter != 'no-gutter' {
        @warn "The second, optional parameter of the `grid-span` mixin only accepts 'no-gutter' or 'ng' as it's parameter";
        padding-left: #{$gutter};
        padding-right: #{$gutter};
        // TODO: WHY IS THIS LOGGING HI???? Want it to fallback to default gutter
    }
}

@mixin grid-push($size) {
    left: percentage($size / $columns);
}

@mixin grid-pull($size) {
    right: percentage($size / $columns);
}
